#!/usr/bin/env ruby
# frozen_string_literal: true

require "thor"
require_relative "../lib/primer/view_components/version"

# Prepares a release PR for `primer_view_components`.
#
# Usage:
#
# script/release for a patch release
# script/release --major for a major release
# script/release --minor for a minor release
class ReleaseCLI < Thor::Group
  include Thor::Actions

  class_option :major, type: :boolean, desc: "Use this option to bump a major version."
  class_option :minor, type: :boolean, desc: "Use this option to bump a minor version."
  class_option :patch, type: :boolean, desc: "Use this option to bump a patch version."

  def self.exit_on_failure?
    false
  end

  def working_tree_is_clean
    tree_status = run("git status --porcelain", capture: true).strip
    raise "Tree is not clean" unless tree_status.empty?
  end

  def must_be_in_main
    raise "Must be in the main branch to release" unless current_branch == "main"
  end

  def git_fetch
    run("git fetch --all")
  end

  def remote_history_is_clean
    remote_history = run("git rev-list --count --left-only @{u}...HEAD", capture: true).strip
    raise "Changes exist on origin not pulled into this branch. Please pull" unless remote_history == "0"
  end

  def local_history_is_clean
    remote_history = run("git rev-list --count --right-only @{u}...HEAD", capture: true).strip
    raise "Changes exist that haven't been pushed to origin. Please pull" unless remote_history == "0"
  end

  def tag_exists_on_remote
    raise "Tag exists on remote" unless run("git rev-parse --quiet --verify refs/tags/v#{new_version}", capture: true).strip.empty?
  end

  def create_release_branch
    run("git switch -c #{release_branch}")
  end

  def update_readme
    gsub_file("CHANGELOG.md", "## main", "## main\n\n## #{new_version}")
  end

  def update_ruby_version
    major, minor, patch = new_version.split(".")

    gsub_file("lib/primer/view_components/version.rb", /MAJOR = [0-9]+/, "MAJOR = #{major}")
    gsub_file("lib/primer/view_components/version.rb", /MINOR = [0-9]+/, "MINOR = #{minor}")
    gsub_file("lib/primer/view_components/version.rb", /PATCH = [0-9]+/, "PATCH = #{patch}")
  end

  def update_gemfiles
    run("bundle")
    run("pushd demo")
    run("bundle")
    run("popd")
  end

  def update_npm
    run("npm version --no-git-tag-version \"#{new_version}\"")
    run("yarn")
  end

  def add_changed_files
    files_to_add = %w[
      CHANGELOG.md
      Gemfile.lock
      demo/Gemfile.lock
      lib/primer/view_components/version.rb
      app/assets/javascripts
      package.json
      yarn.lock
    ]

    run("git add #{files_to_add.join(' ')}")
  end

  def commit_files
    run("git commit -m \"release #{new_version}\"")
  end

  def push_files
    run("git push origin #{release_branch}")
  end

  def create_pull_request
    @pr_url = run("gh pr create -b \"\" -t \"Release v#{new_version}\"", capture: true)
  end

  def final_message
    puts "####################################################"
    puts "PR link: #{@pr_url}"
    puts "When the PR has been merged, run script/publish to publish the gem."
    puts "####################################################"
  end

  private

  def current_branch
    @current_branch ||= run("git symbolic-ref --short HEAD", capture: true).strip
  end

  def current_version
    Primer::ViewComponents::VERSION::STRING
  end

  def new_version
    @new_version ||= case bump
                     when :major
                       "#{Primer::ViewComponents::VERSION::MAJOR + 1}.0.0"
                     when :minor
                       "#{Primer::ViewComponents::VERSION::MAJOR}.#{Primer::ViewComponents::VERSION::MINOR + 1}.0"
                     else
                       "#{Primer::ViewComponents::VERSION::MAJOR}.#{Primer::ViewComponents::VERSION::MINOR}.#{Primer::ViewComponents::VERSION::PATCH + 1}"
                     end
  end

  def bump
    return :major if options[:major]
    return :minor if options[:minor]

    :patch
  end

  def release_branch
    "release-v#{new_version}"
  end
end

ReleaseCLI.start(ARGV)
