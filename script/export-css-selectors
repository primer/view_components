#!/usr/bin/env node

const postcss = require('postcss')
const { readFile, writeFile } = require('node:fs/promises')
const { promisify } = require('util')
const glob = promisify(require('glob'))
const CSSwhat = require('css-what')

console.log('Exporting CSS selectors...')

const capitalize = (s) => s.slice(0, 1).toUpperCase() + s.slice(1)
const snakeToCamelCase = (s) => s.split('_').map(capitalize).join('')
const componentNameToRubyClass = (componentName) =>
  'Primer::' + componentName.split('/').map(snakeToCamelCase).join('::')

const exportSelectors = (folder) => {
  const folderGlob = `${folder}/**/*.css`
  const componentNameRegex = new RegExp(`${folder.replace('/','\\/')}\\/(.*).css`)

  return glob(folderGlob).then(files =>
    Promise.all(
      files.map(async (file) => {
        console.log(`Processing ${file}`)
        const css = await readFile(file, 'utf8')
        const root = postcss.parse(css)
        const componentName = componentNameRegex.exec(file)[1]

        const selectors = []
        const classFiles = []

        root.walkRules(rule => {
          // @keyframes at-rules have children that look like they have normal
          // CSS selectors, but they're each just "from", "to", or a percentage.
          // Either way, we don't have to worry about them as selectors and they
          // don't include any classes.
          if (rule.parent?.type === 'atrule' && rule.parent?.name === 'keyframes') {
            return
          }

          rule.selectors.forEach(ruleSelector => {
            selectors.push(ruleSelector)
            const ruleObj = CSSwhat.parse(ruleSelector)[0][0]
            if (ruleObj.type === 'attribute' && ruleObj.name === 'class') {
              const baseHtmlClass = ruleObj.value
              classFiles.push([baseHtmlClass, componentNameToRubyClass(componentName)])
            }
          })
        })

        console.log(`Writing ${file}.json`)
        writeFile(
          `${file}.json`,
          JSON.stringify({
            name: componentName,
            selectors: [...new Set(selectors)]
          }, null, 2)
        ).catch(error => console.error(`Failed to write ${file}.json`, { error }))

        return classFiles
      })
    )
  )
}

// class names referenced under app/components/primer might need
// to be reserved in addition to getting individual json files
const classShouldBeReserved = className =>
  (className[0].toUpperCase() === className[0])

exportSelectors('app/components/primer')
  .then(classLists => {
    const htmlClassToRubyClasses = {}

    classLists
      .reduce(((a, b) => a.concat(b)), [])
      .filter(cf => classShouldBeReserved(cf[0]))
      // sort by length so we process e.g. "Label" before "Label--accent"
      .sort(([htmlClassA], [htmlClassB]) => htmlClassA.length - htmlClassB.length)
      .forEach(([htmlClass, rubyClass]) => {
        if (!htmlClassToRubyClasses[htmlClass]) {
          htmlClassToRubyClasses[htmlClass] = new Set()
        }

        htmlClassToRubyClasses[htmlClass].add(rubyClass)
      })

    console.log('Writing static/classes.json')
    return writeFile(
      'static/classes.json',
      JSON.stringify(
        Object.fromEntries(
          Object
            .entries(htmlClassToRubyClasses)
            .sort()
            .map(([key, set]) => {
              return [key, [...Array.from(set.values()).sort()]]
            })
        ),
        null,
        2
      )
    )
  })
  .catch(error => console.error("failed to write static/classes.json", { error }))

// stylesheets under app/lib/primer/css need their individual
// json files generated
exportSelectors('app/lib/primer/css')
