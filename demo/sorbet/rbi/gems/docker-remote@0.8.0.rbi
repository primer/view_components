# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `docker-remote` gem.
# Please instead update this file by running `bin/tapioca gem docker-remote`.


# source://docker-remote//lib/docker/remote.rb#1
module Docker; end

# source://docker-remote//lib/docker/remote.rb#2
module Docker::Remote; end

# source://docker-remote//lib/docker/remote/auth_info.rb#3
class Docker::Remote::AuthInfo
  # @return [AuthInfo] a new instance of AuthInfo
  #
  # source://docker-remote//lib/docker/remote/auth_info.rb#21
  def initialize(auth_type, params, creds); end

  # Returns the value of attribute auth_type.
  #
  # source://docker-remote//lib/docker/remote/auth_info.rb#19
  def auth_type; end

  # Returns the value of attribute creds.
  #
  # source://docker-remote//lib/docker/remote/auth_info.rb#19
  def creds; end

  # Returns the value of attribute params.
  #
  # source://docker-remote//lib/docker/remote/auth_info.rb#19
  def params; end

  # source://docker-remote//lib/docker/remote/auth_info.rb#27
  def strategy; end

  class << self
    # source://docker-remote//lib/docker/remote/auth_info.rb#5
    def from_header(header, creds); end
  end
end

# source://docker-remote//lib/docker/remote/basic_auth.rb#5
class Docker::Remote::BasicAuth
  # @return [BasicAuth] a new instance of BasicAuth
  #
  # source://docker-remote//lib/docker/remote/basic_auth.rb#8
  def initialize(creds); end

  # Returns the value of attribute creds.
  #
  # source://docker-remote//lib/docker/remote/basic_auth.rb#6
  def creds; end

  # source://docker-remote//lib/docker/remote/basic_auth.rb#12
  def make_get(path); end
end

# source://docker-remote//lib/docker/remote/bearer_auth.rb#7
class Docker::Remote::BearerAuth
  include ::Docker::Remote::Utils

  # @return [BearerAuth] a new instance of BearerAuth
  #
  # source://docker-remote//lib/docker/remote/bearer_auth.rb#12
  def initialize(auth_info, creds); end

  # Returns the value of attribute auth_info.
  #
  # source://docker-remote//lib/docker/remote/bearer_auth.rb#10
  def auth_info; end

  # Returns the value of attribute creds.
  #
  # source://docker-remote//lib/docker/remote/bearer_auth.rb#10
  def creds; end

  # source://docker-remote//lib/docker/remote/bearer_auth.rb#17
  def make_get(path); end

  private

  # source://docker-remote//lib/docker/remote/bearer_auth.rb#25
  def realm; end

  # source://docker-remote//lib/docker/remote/bearer_auth.rb#29
  def service; end

  # source://docker-remote//lib/docker/remote/bearer_auth.rb#33
  def token; end
end

# source://docker-remote//lib/docker/remote/client.rb#13
class Docker::Remote::Client
  include ::Docker::Remote::Utils

  # @return [Client] a new instance of Client
  #
  # source://docker-remote//lib/docker/remote/client.rb#22
  def initialize(registry_url, repo, username = T.unsafe(nil), password = T.unsafe(nil)); end

  # source://docker-remote//lib/docker/remote/client.rb#40
  def catalog; end

  # Returns the value of attribute creds.
  #
  # source://docker-remote//lib/docker/remote/client.rb#16
  def creds; end

  # source://docker-remote//lib/docker/remote/client.rb#34
  def manifest_for(reference); end

  # Returns the value of attribute registry_url.
  #
  # source://docker-remote//lib/docker/remote/client.rb#16
  def registry_url; end

  # Returns the value of attribute repo.
  #
  # source://docker-remote//lib/docker/remote/client.rb#16
  def repo; end

  # source://docker-remote//lib/docker/remote/client.rb#28
  def tags; end

  private

  # source://docker-remote//lib/docker/remote/client.rb#48
  def auth; end

  # Adapted from: https://spin.atomicobject.com/2013/09/30/socket-connection-timeout-ruby/
  #
  # @return [Boolean]
  #
  # source://docker-remote//lib/docker/remote/client.rb#145
  def can_connect?(host, port); end

  # source://docker-remote//lib/docker/remote/client.rb#73
  def get(path, http: T.unsafe(nil), use_auth: T.unsafe(nil), limit: T.unsafe(nil)); end

  # source://docker-remote//lib/docker/remote/client.rb#134
  def make_http(uri); end

  # source://docker-remote//lib/docker/remote/client.rb#140
  def registry_http; end

  # source://docker-remote//lib/docker/remote/client.rb#109
  def registry_uri; end

  # source://docker-remote//lib/docker/remote/client.rb#69
  def www_auth(response); end
end

# source://docker-remote//lib/docker/remote/client.rb#19
Docker::Remote::Client::DEFAULT_PORT = T.let(T.unsafe(nil), Integer)

# source://docker-remote//lib/docker/remote/client.rb#18
Docker::Remote::Client::PORTMAP = T.let(T.unsafe(nil), Hash)

# source://docker-remote//lib/docker/remote/client.rb#20
Docker::Remote::Client::STANDARD_PORTS = T.let(T.unsafe(nil), Array)

# source://docker-remote//lib/docker/remote.rb#3
class Docker::Remote::ClientError < ::StandardError; end

# source://docker-remote//lib/docker/remote/credentials.rb#3
class Docker::Remote::Credentials
  # @return [Credentials] a new instance of Credentials
  #
  # source://docker-remote//lib/docker/remote/credentials.rb#6
  def initialize(username, password); end

  # Returns the value of attribute password.
  #
  # source://docker-remote//lib/docker/remote/credentials.rb#4
  def password; end

  # Returns the value of attribute username.
  #
  # source://docker-remote//lib/docker/remote/credentials.rb#4
  def username; end
end

# source://docker-remote//lib/docker/remote/client.rb#8
class Docker::Remote::DockerRemoteError < ::StandardError; end

# source://docker-remote//lib/docker/remote/no_auth.rb#3
class Docker::Remote::NoAuth
  include ::Singleton
  extend ::Singleton::SingletonClassMethods

  # source://docker-remote//lib/docker/remote/no_auth.rb#6
  def make_get(path); end

  class << self
    private

    def allocate; end
    def new(*_arg0); end
  end
end

# source://docker-remote//lib/docker/remote.rb#6
class Docker::Remote::NotFoundError < ::Docker::Remote::ClientError; end

# source://docker-remote//lib/docker/remote.rb#4
class Docker::Remote::ServerError < ::StandardError; end

# source://docker-remote//lib/docker/remote/client.rb#11
class Docker::Remote::TooManyRetriesError < ::Docker::Remote::DockerRemoteError; end

# source://docker-remote//lib/docker/remote.rb#5
class Docker::Remote::UnauthorizedError < ::Docker::Remote::ClientError; end

# source://docker-remote//lib/docker/remote/client.rb#10
class Docker::Remote::UnexpectedResponseCodeError < ::Docker::Remote::DockerRemoteError; end

# source://docker-remote//lib/docker/remote.rb#7
class Docker::Remote::UnknownRepoError < ::Docker::Remote::ClientError; end

# source://docker-remote//lib/docker/remote.rb#9
class Docker::Remote::UnsupportedAuthTypeError < ::StandardError; end

# source://docker-remote//lib/docker/remote/client.rb#9
class Docker::Remote::UnsupportedVersionError < ::Docker::Remote::DockerRemoteError; end

# source://docker-remote//lib/docker/remote/utils.rb#5
module Docker::Remote::Utils
  # source://docker-remote//lib/docker/remote/utils.rb#6
  def potentially_raise_error!(response); end
end
