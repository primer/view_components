# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `colorize` gem.
# Please instead update this file by running `bin/tapioca gem colorize`.


# source://colorize//lib/colorize/class_methods.rb#1
module Colorize; end

# source://colorize//lib/colorize/class_methods.rb#2
module Colorize::ClassMethods
  # Color codes hash
  #
  # source://colorize//lib/colorize/class_methods.rb#61
  def color_codes; end

  # Method removed, raise NoMethodError
  #
  # source://colorize//lib/colorize/class_methods.rb#52
  def color_matrix(_ = T.unsafe(nil)); end

  # Generate color and on_color methods
  #
  # source://colorize//lib/colorize/class_methods.rb#93
  def color_methods; end

  # Display color samples
  #
  # source://colorize//lib/colorize/class_methods.rb#42
  def color_samples; end

  # Return array of available colors used by colorize
  #
  # source://colorize//lib/colorize/class_methods.rb#28
  def colors; end

  # Property to disable colorization
  #
  # source://colorize//lib/colorize/class_methods.rb#6
  def disable_colorization(value = T.unsafe(nil)); end

  # Setter for disable colorization
  #
  # source://colorize//lib/colorize/class_methods.rb#21
  def disable_colorization=(value); end

  # Mode codes hash
  #
  # source://colorize//lib/colorize/class_methods.rb#78
  def mode_codes; end

  # Return array of available modes used by colorize
  #
  # source://colorize//lib/colorize/class_methods.rb#35
  def modes; end

  # Generate modes methods
  #
  # source://colorize//lib/colorize/class_methods.rb#110
  def modes_methods; end
end

# source://colorize//lib/colorize/instance_methods.rb#2
module Colorize::InstanceMethods
  # Change color of string
  #
  # Examples:
  #
  #   puts "This is blue".colorize(:blue)
  #   puts "This is light blue".colorize(:light_blue)
  #   puts "This is also blue".colorize(:color => :blue)
  #   puts "This is light blue with red background".colorize(:color => :light_blue, :background => :red)
  #   puts "This is light blue with red background".colorize(:light_blue ).colorize( :background => :red)
  #   puts "This is blue text on red".blue.on_red
  #   puts "This is red on blue".colorize(:red).on_blue
  #   puts "This is red on blue and underline".colorize(:red).on_blue.underline
  #   puts "This is blue text on red".blue.on_red.blink
  #   puts "This is uncolorized".blue.on_red.uncolorize
  #
  # source://colorize//lib/colorize/instance_methods.rb#19
  def colorize(params); end

  # Return true if string is colorized
  #
  # @return [Boolean]
  #
  # source://colorize//lib/colorize/instance_methods.rb#41
  def colorized?; end

  # Return uncolorized string
  #
  # source://colorize//lib/colorize/instance_methods.rb#32
  def uncolorize; end

  private

  # Color for background (offset 40)
  #
  # source://colorize//lib/colorize/instance_methods.rb#94
  def background_color(color); end

  # Color for foreground (offset 30)
  #
  # source://colorize//lib/colorize/instance_methods.rb#87
  def color(color); end

  # Set color from params symbol
  #
  # source://colorize//lib/colorize/instance_methods.rb#80
  def color_from_symbol(match, symbol); end

  # Set colors from params hash
  #
  # source://colorize//lib/colorize/instance_methods.rb#71
  def colors_from_hash(match, hash); end

  # Set color from params
  #
  # source://colorize//lib/colorize/instance_methods.rb#61
  def colors_from_params(match, params); end

  # Set default colors
  #
  # source://colorize//lib/colorize/instance_methods.rb#52
  def defaults_colors(match); end

  # Mode
  #
  # source://colorize//lib/colorize/instance_methods.rb#101
  def mode(mode); end

  # Require windows libs
  #
  # source://colorize//lib/colorize/instance_methods.rb#126
  def require_windows_libs; end

  # Scan for colorized string
  #
  # source://colorize//lib/colorize/instance_methods.rb#108
  def scan_for_colors; end

  # source://colorize//lib/colorize/instance_methods.rb#114
  def split_colors(match); end
end

# ColorizedString class extension.
#
# source://colorize//lib/colorized_string.rb#6
class ColorizedString < ::String
  include ::Colorize::InstanceMethods
  extend ::Colorize::ClassMethods

  # source://colorize//lib/colorize/class_methods.rb#97
  def black; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def blink; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def blue; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def bold; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def cyan; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def green; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def hide; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def italic; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_black; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_blue; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_cyan; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_green; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_magenta; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_red; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_white; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def light_yellow; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def magenta; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_black; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_blue; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_cyan; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_green; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_black; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_blue; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_cyan; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_green; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_magenta; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_red; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_white; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_light_yellow; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_magenta; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_red; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_white; end

  # source://colorize//lib/colorize/class_methods.rb#101
  def on_yellow; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def red; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def swap; end

  # source://colorize//lib/colorize/class_methods.rb#114
  def underline; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def white; end

  # source://colorize//lib/colorize/class_methods.rb#97
  def yellow; end

  class << self
    # Sortcut to create ColorizedString with ColorizedString['test'].
    #
    # source://colorize//lib/colorized_string.rb#16
    def [](string); end
  end
end
