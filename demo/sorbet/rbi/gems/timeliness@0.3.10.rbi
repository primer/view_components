# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `timeliness` gem.
# Please instead update this file by running `bin/tapioca gem timeliness`.


# source://timeliness//lib/timeliness/helpers.rb#1
module Timeliness
  class << self
    # source://forwardable/1.3.3/forwardable.rb#231
    def _parse(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def add_formats(*args, **_arg1, &block); end

    # Returns the value of attribute ambiguous_year_threshold.
    #
    # source://timeliness//lib/timeliness.rb#16
    def ambiguous_year_threshold; end

    # Sets the attribute ambiguous_year_threshold
    #
    # @param value the value to set the attribute ambiguous_year_threshold to.
    #
    # source://timeliness//lib/timeliness.rb#16
    def ambiguous_year_threshold=(_arg0); end

    # Returns the value of attribute date_for_time_type.
    #
    # source://timeliness//lib/timeliness.rb#16
    def date_for_time_type; end

    # Sets the attribute date_for_time_type
    #
    # @param value the value to set the attribute date_for_time_type to.
    #
    # source://timeliness//lib/timeliness.rb#16
    def date_for_time_type=(_arg0); end

    # Returns the value of attribute default_timezone.
    #
    # source://timeliness//lib/timeliness.rb#16
    def default_timezone; end

    # Sets the attribute default_timezone
    #
    # @param value the value to set the attribute default_timezone to.
    #
    # source://timeliness//lib/timeliness.rb#16
    def default_timezone=(_arg0); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def parse(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def remove_formats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_euro_formats(*args, **_arg1, &block); end

    # source://forwardable/1.3.3/forwardable.rb#231
    def use_us_formats(*args, **_arg1, &block); end
  end
end

# source://timeliness//lib/timeliness/definitions.rb#2
module Timeliness::Definitions
  class << self
    # Adds new formats. Must specify format type and can specify a :before
    # option to nominate which format the new formats should be inserted in
    # front on to take higher precedence.
    #
    # Error is raised if format already exists or if :before format is not found.
    #
    # @raise [FormatNotFound]
    #
    # source://timeliness//lib/timeliness/definitions.rb#163
    def add_formats(type, *add_formats); end

    # source://timeliness//lib/timeliness/definitions.rb#203
    def compile_formats; end

    # Returns the value of attribute date_format_set.
    #
    # source://timeliness//lib/timeliness/definitions.rb#155
    def date_format_set; end

    # Returns the value of attribute date_formats.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def date_formats; end

    # Sets the attribute date_formats
    #
    # @param value the value to set the attribute date_formats to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def date_formats=(_arg0); end

    # Returns the value of attribute datetime_format_set.
    #
    # source://timeliness//lib/timeliness/definitions.rb#155
    def datetime_format_set; end

    # Returns the value of attribute datetime_formats.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def datetime_formats; end

    # Sets the attribute datetime_formats
    #
    # @param value the value to set the attribute datetime_formats to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def datetime_formats=(_arg0); end

    # Returns the value of attribute format_components.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def format_components; end

    # Sets the attribute format_components
    #
    # @param value the value to set the attribute format_components to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def format_components=(_arg0); end

    # Returns format for type and other possible matching format set based on type
    # and value length. Gives minor speed-up by checking string length.
    #
    # source://timeliness//lib/timeliness/definitions.rb#223
    def format_sets(type, string); end

    # Returns the value of attribute format_tokens.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def format_tokens; end

    # Sets the attribute format_tokens
    #
    # @param value the value to set the attribute format_tokens to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def format_tokens=(_arg0); end

    # Delete formats of specified type. Error raised if format not found.
    #
    # source://timeliness//lib/timeliness/definitions.rb#180
    def remove_formats(type, *remove_formats); end

    # source://timeliness//lib/timeliness/definitions.rb#216
    def sorted_token_keys; end

    # Returns the value of attribute time_format_set.
    #
    # source://timeliness//lib/timeliness/definitions.rb#155
    def time_format_set; end

    # Returns the value of attribute time_formats.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def time_formats; end

    # Sets the attribute time_formats
    #
    # @param value the value to set the attribute time_formats to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def time_formats=(_arg0); end

    # Returns the value of attribute timezone_mapping.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def timezone_mapping; end

    # Sets the attribute timezone_mapping
    #
    # @param value the value to set the attribute timezone_mapping to.
    #
    # source://timeliness//lib/timeliness/definitions.rb#154
    def timezone_mapping=(_arg0); end

    # Removes US date formats so that ambiguous dates are parsed as European format
    #
    # source://timeliness//lib/timeliness/definitions.rb#191
    def use_euro_formats; end

    # Restores default to parse ambiguous dates as US format
    #
    # source://timeliness//lib/timeliness/definitions.rb#198
    def use_us_formats; end
  end
end

# source://timeliness//lib/timeliness/definitions.rb#151
class Timeliness::Definitions::DuplicateFormat < ::StandardError; end

# source://timeliness//lib/timeliness/definitions.rb#150
class Timeliness::Definitions::FormatNotFound < ::StandardError; end

# source://timeliness//lib/timeliness/definitions.rb#149
Timeliness::Definitions::US_FORMAT_REGEXP = T.let(T.unsafe(nil), Regexp)

# source://timeliness//lib/timeliness/format.rb#2
class Timeliness::Format
  include ::Timeliness::Helpers

  # @return [Format] a new instance of Format
  #
  # source://timeliness//lib/timeliness/format.rb#9
  def initialize(format_string); end

  # source://timeliness//lib/timeliness/format.rb#13
  def compile!; end

  # Returns the value of attribute format_string.
  #
  # source://timeliness//lib/timeliness/format.rb#7
  def format_string; end

  # Redefined on compile
  #
  # source://timeliness//lib/timeliness/format.rb#48
  def process(*args); end

  # Returns the value of attribute regexp.
  #
  # source://timeliness//lib/timeliness/format.rb#7
  def regexp; end

  # Returns the value of attribute regexp_string.
  #
  # source://timeliness//lib/timeliness/format.rb#7
  def regexp_string; end

  # Returns the value of attribute token_count.
  #
  # source://timeliness//lib/timeliness/format.rb#7
  def token_count; end

  private

  # source://timeliness//lib/timeliness/format.rb#52
  def define_process_method(components); end
end

# source://timeliness//lib/timeliness/format.rb#5
class Timeliness::Format::CompilationFailed < ::StandardError; end

# source://timeliness//lib/timeliness/format_set.rb#2
class Timeliness::FormatSet
  # @return [FormatSet] a new instance of FormatSet
  #
  # source://timeliness//lib/timeliness/format_set.rb#9
  def initialize(formats); end

  # Compiles the formats into one big regexp. Stores the index of where
  # each format's capture values begin in the matchdata.
  #
  # source://timeliness//lib/timeliness/format_set.rb#17
  def compile!; end

  # Returns the value of attribute formats.
  #
  # source://timeliness//lib/timeliness/format_set.rb#3
  def formats; end

  # source://timeliness//lib/timeliness/format_set.rb#30
  def match(string, format_string = T.unsafe(nil)); end

  # Returns the value of attribute regexp.
  #
  # source://timeliness//lib/timeliness/format_set.rb#3
  def regexp; end

  # source://timeliness//lib/timeliness/format_set.rb#43
  def single_format(format_string); end

  class << self
    # source://timeliness//lib/timeliness/format_set.rb#5
    def compile(formats); end
  end
end

# source://timeliness//lib/timeliness/helpers.rb#2
module Timeliness::Helpers
  # source://timeliness//lib/timeliness/helpers.rb#33
  def abbr_month_names; end

  # source://timeliness//lib/timeliness/helpers.rb#4
  def full_hour(hour, meridian); end

  # @return [Boolean]
  #
  # source://timeliness//lib/timeliness/helpers.rb#48
  def i18n_loaded?; end

  # source://timeliness//lib/timeliness/helpers.rb#37
  def microseconds(usec); end

  # source://timeliness//lib/timeliness/helpers.rb#24
  def month_index(month); end

  # source://timeliness//lib/timeliness/helpers.rb#29
  def month_names; end

  # source://timeliness//lib/timeliness/helpers.rb#41
  def offset_in_seconds(offset); end

  # source://timeliness//lib/timeliness/helpers.rb#15
  def unambiguous_year(year); end
end

# source://timeliness//lib/timeliness/parser.rb#2
module Timeliness::Parser
  class << self
    # source://timeliness//lib/timeliness/parser.rb#38
    def _parse(string, type = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://timeliness//lib/timeliness/parser.rb#24
    def make_time(time_array, zone_option = T.unsafe(nil)); end

    # source://timeliness//lib/timeliness/parser.rb#7
    def parse(value, *args); end

    private

    # @return [Boolean]
    #
    # source://timeliness//lib/timeliness/parser.rb#56
    def acts_like_temporal?(value); end

    # source://timeliness//lib/timeliness/parser.rb#119
    def create_time_in_zone(time_array, zone = T.unsafe(nil)); end

    # source://timeliness//lib/timeliness/parser.rb#85
    def current_date(options); end

    # source://timeliness//lib/timeliness/parser.rb#96
    def current_time_in_zone(zone); end

    # source://timeliness//lib/timeliness/parser.rb#71
    def default_values_by_type(values, type, options); end

    # source://timeliness//lib/timeliness/parser.rb#155
    def evaluate_date_for_time_type; end

    # Enforce strict date part validity which the Time class does not.
    # Only does full date check if month and day are possibly invalid.
    #
    # source://timeliness//lib/timeliness/parser.rb#151
    def fast_date_valid_with_fallback(year, month, day); end

    # @return [Boolean]
    #
    # source://timeliness//lib/timeliness/parser.rb#52
    def parseable?(value); end

    # source://timeliness//lib/timeliness/parser.rb#107
    def shift_time_to_zone(time, zone = T.unsafe(nil)); end

    # Taken from ActiveSupport and simplified
    #
    # source://timeliness//lib/timeliness/parser.rb#141
    def time_with_datetime_fallback(utc_or_local, year, month = T.unsafe(nil), day = T.unsafe(nil), hour = T.unsafe(nil), min = T.unsafe(nil), sec = T.unsafe(nil), usec = T.unsafe(nil)); end

    # source://timeliness//lib/timeliness/parser.rb#60
    def type_and_options_from_args(args); end

    # source://timeliness//lib/timeliness/parser.rb#131
    def zone_and_offset(parsed_value); end
  end
end

# source://timeliness//lib/timeliness/parser.rb#3
class Timeliness::Parser::MissingTimezoneSupport < ::StandardError; end

# source://timeliness//lib/timeliness/version.rb#2
Timeliness::VERSION = T.let(T.unsafe(nil), String)
