# frozen_string_literal: true

module Primer
  module Alpha
    # Wraps an input (or arbitrary content) with a label above and a caption and validation message beneath.
    #
    # NOTE: This `FormControl` component is designed for wrapping inputs that aren't supported by the Primer
    # forms framework.
    #
    # @accessibility
    #   Because `FormControl` does not manage the actual `<input>` element, it cannot semantically connect
    #   the input and its associated label. For this and other reasons, consumers are highly encouraged to
    #   use Primer's pre-made form components like `TextField`, etc, ideally via the Primer forms framework.
    #
    #   Users of the `FormControl` component will need to manually connect the label using the `for:`
    #   attribute, eg:
    #
    #   ```erb
    #   <%= form_with(url: "/path/somewhere") do |f| %>
    #     <%= render(Primer::Alpha::FormControl.new(label_arguments: { for: "bar" })) do |component| %>
    #       <% component.with_input do |input_arguments| %>
    #         <%= f.text_field(:bar, **input_arguments) %>
    #       <% end %>
    #     <% end %>
    #   <% end %>
    #   ```
    #
    #   Note that the name of the field, `:bar`, is passed to both the Rails `#text_field` method _and_
    #   as part of the `label_arguments` passed to the `FormControl` constructor.
    #
    #   Similarly, `FormControl` cannot automatically connect the `<input>` element to the caption and
    #   validation message elements. The component attempts to mitigate this by including the correct
    #   `aria-describedby` attribute in the hash it yields to the block passed to `#with_input`. In the
    #   example above, `input_arguments[:aria][:describedby]` contains the HTML IDs for both the caption
    #   and validation message elements, and can be passed directly to Rails' form helper methods. If the
    #   input being wrapped is not generated by a Rails form helper, care must be taken to set
    #   `aria-describedby` manually on the input element.
    #
    class FormControl < Primer::Component
      # Describes the field and what sorts of input it expects. Displayed below the input.
      # Note that this slot takes precedence over the `caption:` argument in the constructor.
      renders_one :caption

      # @param label [String] Label text displayed above the input.
      # @param caption [String] Describes the field and what sort of input it expects. Displayed below the input. Note that the `caption` slot is also available and takes precedence over this argument when provided.
      # @param validation_message [String] A string displayed in red between the caption and the input indicating the input's contents are invalid.
      # @param required [Boolean] Default `false`. When set to `true`, causes an asterisk (*) to appear next to the field's label indicating it is a required field. Note that this option explicitly does _not_ add a `required` HTML attribute. Doing so would enable native browser validations, which are inaccessible and inconsistent with the Primer design system.
      # @param visually_hide_label [Boolean] When set to `true`, hides the label. Although the label will be hidden visually, it will still be visible to screen readers.
      # @param full_width [Boolean] When set to `true`, the form control will take up all the horizontal space allowed by its container.
      # @param label_arguments [Hash] HTML attributes to attach to the `<label>` element that labels the input.
      # @param system_arguments [Hash] <%= link_to_system_arguments_docs %>
      def initialize(label:, caption: nil, validation_message: nil, required: false, visually_hide_label: false, full_width: false, label_arguments: {}, **system_arguments)
        @label = label
        @init_caption = caption
        @validation_message = validation_message
        @required = required
        @visually_hide_label = visually_hide_label
        @full_width = full_width
        @label_arguments = label_arguments
        @system_arguments = system_arguments

        @system_arguments[:classes] = class_names(
          @system_arguments[:classes],
          "FormControl",
          "FormControl--fullWidth" => full_width?
        )

        @label_arguments[:classes] = class_names(
          @label_arguments.delete(:classes),
          "FormControl-label",
          visually_hide_label? ? "sr-only" : nil
        )

        base_id = self.class.generate_id
        @validation_id = "validation-#{base_id}"
        @caption_id = "caption-#{base_id}"

        @validation_arguments = {
          classes: "FormControl-inlineValidation",
          id: @validation_id
        }
      end

      # @!parse
      #   # The input content. Yields a set of <%= link_to_system_arguments_docs %> that should be added to the input.
      #   #
      #   renders_one(:input)

      def with_input(&block)
        @input_block = block
      end

      # Whether or not this input is marked as required.
      # @returns Boolean
      def required?
        @required
      end

      # Whether or not to hide the label visually. The label will still be visible to screen readers.
      # @returns Boolean
      def visually_hide_label?
        @visually_hide_label
      end

      # Whether or not the form control should take up all the horizontal space allowed by its container.
      # @returns Boolean
      def full_width?
        @full_width
      end

      private

      def before_render
        # make sure to evaluate the component's content block so slots are defined
        content

        @input_arguments = {
          aria: {}
        }

        ids = [].tap do |memo|
          memo << @validation_id if @validation_message
          memo << @caption_id if @init_caption || caption?
        end

        @input_arguments[:aria][:required] = "true" if required?

        return if ids.empty?

        @input_arguments[:aria][:describedby] = ids.join(" ")
      end
    end
  end
end
